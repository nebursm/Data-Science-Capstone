y <- V(user_net)[nei(intersect)]
y <- neighbors(user_net, top_both)
plot(y)
plot.igraph(y)
library(igraph)
plot(y)
str()
str(x)
x[1]
x[10]
x[6]
plot(user_net)
x <- subgraph(user_net, top_both)
x <- induced_subgraph(user_net, top_both)
plot(x)
x <- induced_subgraph(user_net, y)
plot(x)
x <- induced_subgraph(user_net, top_both)
plot(x)
plot(x, layout=layout.fruchterman.reingold)
plot(x, layout=layout.fruchterman.reingold, vertex.label.cex=1)
plot(x, layout=layout.fruchterman.reingold, vertex.label.cex=0.8)
n <- 50 # number of top nodes
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
top_pr <- V(user_net)[match(pr$vector[pr_rank <= n], pr$vector)]
top_both <- intersect(top_bet, top_pr)
# Create a subset network including only top nodes and plot it
top_net <- induced_subgraph(user_net, top_both)
par(mai=c(0,0,1,0))
plot(top_both, layout=layout.fruchterman.reingold, vertex.label.cex=0.8)
plot(top_net, layout=layout.fruchterman.reingold, vertex.label.cex=0.8)
n <- 20 # number of top nodes
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
top_pr <- V(user_net)[match(pr$vector[pr_rank <= n], pr$vector)]
top_both <- intersect(top_bet, top_pr)
# Create a subset network including only top nodes and plot it
top_net <- induced_subgraph(user_net, top_both)
par(mai=c(0,0,1,0))
plot(top_net, layout=layout.fruchterman.reingold, vertex.label.cex=0.8)
library(sqldf)
library(tcltk)
remove.packages("tcltk")
install.packages("tcltk")
install.packages("tcltk")
install.packages("tcltk")
library(tcltk)
library(sqldf)
library(igraph)
library(sqldf)
load("~/Documents/CURSOS/Data Science Capstone/yelp_dataset_challenge_academic_dataset/Capstone V04.RData")
# Rank betweeness and page rank scores
bet_rank <- rank(-unname(bet))
pr_rank <- rank(-unname(pr$vector))
# Get top nodes
n <- 20 # number of top nodes
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
top_pr <- V(user_net)[match(pr$vector[pr_rank <= n], pr$vector)]
top_both <- intersect(top_bet, top_pr)
# Create a subset network including only top nodes
top_net <- induced_subgraph(user_net, top_both)
par(mai=c(0,0,1,0))
# Replace vertex labels with user names where available, otherwise use user_id
vnames <- paste(names(V(top_net)), collapse="','")
sql <- paste0("select uname, user_id from user where user_id in('", vnames, "')")
unames <- sqldf(sql)
unames <- rbind(unames, data.frame(uname=setdiff(names(V(top_net)), unames[,2]), user_id=setdiff(names(V(top_net)), unames[,2])))
V(top_net)$label <- unames[match(names(V(top_net)), unames[,2]),1]
# Plot the resulting network
plot(top_net, layout=layout.fruchterman.reingold, vertex.label.cex=0.8)
library(doMC)
registerDoMC(cores = 6)
library(sqldf)
library(igraph)
# Rank betweeness and page rank scores
bet_rank <- rank(-unname(bet))
pr_rank <- rank(-unname(pr$vector))
# Get top nodes
n <- 20 # number of top nodes
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
top_pr <- V(user_net)[match(pr$vector[pr_rank <= n], pr$vector)]
top_both <- intersect(top_bet, top_pr)
# Create a subset network including only top nodes
top_net <- induced_subgraph(user_net, top_both)
par(mai=c(0,0,1,0))
# Replace vertex labels with user names where available, otherwise use user_id
vnames <- paste(names(V(top_net)), collapse="','")
sql <- paste0("select uname, user_id from user where user_id in('", vnames, "')")
unames <- sqldf(sql)
unames <- rbind(unames, data.frame(uname=setdiff(names(V(top_net)), unames[,2]), user_id=setdiff(names(V(top_net)), unames[,2])))
V(top_net)$label <- unames[match(names(V(top_net)), unames[,2]),1]
# Plot the resulting network
plot(top_net, layout=layout.fruchterman.reingold, vertex.label.cex=0.8)
unames
V(top_net)$names
V(top_net)$name
library(cluster)
clusplot(user_scale, fit$cluster, color=TRUE, shade=TRUE,
labels=2, lines=0)
clusplot(sample(user_scale,1000), fit$cluster, color=TRUE, shade=TRUE, labels=2, lines=0)
dim(fit$cluster)
length(fit$cluster)
x <- sample(user_scale, size=1000)
daisy(x)
x <- sample(data.frame(user_scale), size=1000)
View(user_scale)
x <- user_scale[sample(nrow(user_scale), size=1000)]
head(x)
x <- user_scale[sample(nrow(user_scale), size=1000),]
head(x)
daisy(x)
y <- daisy(x)
head(y)
sk2 <- silhouette(fit$cl, y^2)
aggregate(user_sub,by=list(fit$cluster),FUN=mean)
View(user_sub)
user_sub2 <- user_sub[fit.cluster == 2]
user_sub2 <- user_sub[user_sub$fit.cluster == 2]
user_sub2 <- user_sub[user_sub$fit.cluster == 2,]
x <- daisy(user_sub2)
fit$cluster[2]
fit$cluster[1]
head(fit$cluster)
fit$cluster[1:11]
fit$cluster[fit$cluster == 2]
sk2 <- silhouette(fit$cluster[fit$cluster == 2], user_sub2)
sk2 <- silhouette(fit$cluster[fit$cluster == 2], x^2)
plot(sk2)
sk2
fit$cluster[fit$cl == 2]
fit$cl[fit$cl == 2]
x <- daisy(user_sub2, metric = "euclidean")
sk2 <- silhouette(fit$cluster[fit$cluster == 2], x^2)
user_scale_samp <- user_scale[sample(nrow(user_scale), size=1000), 1]
km <- kmeans(user_scale_samp, 5)
aggregate(user_sub,by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
user_scale_samp <- user_scale[sample(nrow(user_scale), size=1000), ]
km <- kmeans(user_scale_samp, 5)
aggregate(user_scale_samp,by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
sk <- silhoutte(km$cl, dissE)
sk <- silhouette(km$cl, dissE)
plot(sk)
names(sk)
summary(sk)
set.seed(12345)
samp <- sample(nrow(user_scale), size=1000
)
user_scale_samp <- user_scale[samp, ]
km <- kmeans(user_scale_samp, 5)
aggregate(user_sub[samp,],by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
sk <- silhoutte(km$cl, dissE)
sk <- silhouette(km$cl, dissE)
summary(sk)
plot(sk)
par(mai=c(0,0,1,0))
plot(sk)
par(mai=c(1,1,1,1))
plot(sk)
plot(sk, cex=0.8)
plot(sk, cex=0.6)
plot(sk, cex.lab=0.6)
plot(sk, cex.axis=0.6)
plot(sk, cex.axis=0.6, col="steelblue")
plot(sk, cex.axis=0.6, col="red")
plot(sk, cex.lab=0.6, col="red")
plot(sk, cex.sub=0.6, col="red")
set.seed(12345)
samp <- sample(nrow(user_scale), size=5000)
user_scale_samp <- user_scale[samp, ]
km <- kmeans(user_scale_samp, 5)
aggregate(user_sub[samp,],by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
sk <- silhouette(km$cl, dissE)
summary(sk)
par(mai=c(1,1,1,1))
plot(sk, cex.sub=0.6, col="red")
plot(sk, cex.sub=0.6, col="red", xax.pretty=T)
plot(sk, cex.sub=0.6, col="red", xax.pretty=F)
plot(sk, cex.sub=0.6, col="red", adj=0)
plot(sk, cex.sub=0.6, col=c(2,0), adj=0)
plot(sk, cex.sub=0.6, col="blue", adj=0)
set.seed(12345)
samp <- sample(nrow(user_scale), size=10000)
user_scale_samp <- user_scale[samp, ]
km <- kmeans(user_scale_samp, 5)
aggregate(user_sub[samp,],by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
sk <- silhouette(km$cl, dissE)
summary(sk)
par(mai=c(1,1,1,1))
plot(sk, cex.sub=0.6, col="blue", adj=0)
sk <- silhouette(km$cl, dissE^2)
summary(sk)
par(mai=c(1,1,1,1))
plot(sk, cex.sub=0.6, col="blue", adj=0)
set.seed(12345)
samp <- sample(nrow(user_scale), size=1000)
user_scale_samp <- user_scale[samp, ]
km <- kmeans(user_scale_samp, 5)
aggregate(user_sub[samp,],by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
sk <- silhouette(km$cl, dissE)
summary(sk)
par(mai=c(1,1,1,1))
plot(sk, cex.sub=0.6, col="red", adj=0)
km$centroid
plot(sk, cex=0.6, col="red", adj=0)
plot(sk, col="red")
aggregate(user_sub,by=list(fit$cluster),FUN=mean)
aggregate(user_sub,by=list(fit$cluster),FUN=sd)
aggregate(user_sub,by=list(fit$cluster),FUN=sd)[2]
aggregate(user_sub,by=list(fit$cluster),FUN=sd)[,2]
aggregate(user_sub,by=list(fit$cluster),FUN=sd)[2,]
aggregate(user_sub,by=list(fit$cluster),FUN=mean)[2,]
View(user_sub2)
View(user)
user_sub$user_id <- user$user_id
user_sub$user_id[user_sub$fit.cluster == 2]
unames
insersect(unames[,2],user_sub$user_id[user_sub$fit.cluster == 2])
intersect(unames[,2],user_sub$user_id[user_sub$fit.cluster == 2])
summary(fit)
aggregate(user_sub,by=list(fit$cluster),FUN=mean)
user_sub.cl2 <- user_sub[user_sub$fit.cluster == 2]
View(user_sub)
user_sub.cl2 <- user_sub[user_sub$fit.cluster == 2,]
install.packages("broom")
library(cluster)
library(broom)
kclusts <- data.fram2()
kclusts <- data.frame()
for (i in 1:9) {
kclusts$k <- i
kclusts$km <- kmeans(user_scale, i)
}
library(dplyr)
kclusts <- data.frame(k=1:9) %>% group_by(k) %>% do(kclust=kmeans(user_scale, .$k))
View(kclusts)
clusters <- kclusts %>% group_by(k) %>% do(tidy(.$kclust[[1]]))
assignments <- kclusts %>% group_by(k) %>% do(augment(.$kclust[[1]], user_scale))
clusterings <- kclusts %>% group_by(k) %>% do(glance(.$kclust[[1]]))
library(ggplot)
library(ggplot2)
ggplot(assignments, aes(x1, x2)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
View(assignments)
ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
kclusts <- data.frame(k=1:9) %>% group_by(k) %>% do(kclust=kmeans(user_scale_samp, .$k))
clusters <- kclusts %>% group_by(k) %>% do(tidy(.$kclust[[1]]))
assignments <- kclusts %>% group_by(k) %>% do(augment(.$kclust[[1]], user_scale_samp))
clusterings <- kclusts %>% group_by(k) %>% do(glance(.$kclust[[1]]))
ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
View(user_sub)
ggplot(assignments, aes(review_count, tot_compliments)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
ggplot(assignments, aes(review_count, stars)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
View(user)
ggplot(assignments, aes(review_count, average_stars)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
p1 <- ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
p2 <- p1 + geom_point(data=clusters, size=10, shape="x")
p2
View(user_sub)
p1 <- ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
p2 <- p1 + geom_point(data=clusters, size=10, shape="x")
p2
ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
+ geom_point(data=clusters, size=10, shape="x")
ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)  + geom_point(data=clusters, size=10, shape="x")
ggplot(assignments, aes(review_count, average_stars)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k) + geom_point(data=clusters, size=10, shape="x")
ggplot(assignments, aes(assignments$review_count, average_stars)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k) + geom_point(data=clusters, size=10, shape="x")
ggplot(assignments, aes(assignments$review_count, assignments$average_stars)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k) + geom_point(data=clusters, size=10, shape="x")
View(kclusts)
ggplot(clusterings, aes(k, tot.withinss)) + geom_line()
# K-Means Cluster Analysis
fit <- kmeans(user_scale, 4) # 4 cluster solution
# get cluster means
aggregate(user_sub,by=list(fit$cluster),FUN=mean)
# append cluster assignment
user_sub <- data.frame(user_sub, fit$cluster)
user_sub$user_id <- user$user_id
user_sub_cl1 <- user_sub[user_sub$fit.cluster == 1,]
km <- kmeans(user_scale_samp, 4)
aggregate(user_sub[samp,],by=list(km$cluster),FUN=mean)
dissE <- daisy(user_scale_samp)
sk <- silhouette(km$cl, dissE)
summary(sk)
par(mai=c(1,1,1,1))
plot(sk, col="red")
intersect(unames[,2],user_sub_cl1$user_id)
ggplot(assignments, aes(review_count, fans)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
ggplot(assignments, aes(review_count, tot_compliments)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
ggplot(assignments, aes(review_count, average_stars)) + geom_point(aes(color=.cluster)) + facet_wrap(~ k)
ggplot(clusterings, aes(k, tot.withinss)) + geom_line()
library(caret)
library(rattle)
install.packages("RGtk2")
library(rattle)
library(caret)
setwd("~/Documents/CURSOS/Data Science Capstone/yelp_dataset_challenge_academic_dataset/preprocess data")
business <- read.csv("business.csv", stringsAsFactors = FALSE)
bus_low <- subset(business, stars <= 2.0, select = c(checkin_tot, stars))
bus_high <- subset(business, stars >= 4.0, select = c(checkin_tot, stars))
bus_sub <- subset(business, checkin_tot <= 500, select = c(checkin_tot, stars))
library(corrgram)
install.packages("corrgram")
library(corrgram)
corrgram(bus_low, order=TRUE, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
corrgram(bus_low, order=NULL, lower.panel=panel.shade, upper.panel=panel.pie, text.panel=panel.txt,
main="Car Milage Data in PC2/PC1 Order")
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", main = "", varwidth = TRUE, col = "red3")
dev.copy2pdf("Q01_P01", out.type = "pdf")
pdf("Q01_P01", width=7, height=7)
dev.off()
pdf("Q01_P01.pdf", width=7, height=7)
plot(density(bus_low$checkin_tot), main="Total Check-in Low", col="lightblue", lwd=3)
pdf("Q01_P02.pdf", width=7, height=7)
plot(density(bus_high$checkin_tot), main="Total Check-in High", col="lightblue", lwd=3)
dev.off()
pdf("Q01_P01.pdf", width=7, height=7)
plot(density(bus_low$checkin_tot), main="Total Check-in Low", col="lightblue", lwd=3)
dev.off()
pdf("Q01_P02.pdf", width=7, height=7)
plot(density(bus_high$checkin_tot), main="Total Check-in High", col="lightblue", lwd=3)
dev.off()
pdf("Q01_P01.pdf", width=7, height=7)
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", main = "", varwidth = TRUE, col = "red3")
dev.off()
pdf("Q01_P02.pdf", width=5, height=5)
plot(density(bus_low$checkin_tot), main="Total Check-in Low", col="lightblue", lwd=3)
dev.off()
pdf("Q01_P03.pdf", width=5, height=5)
plot(density(bus_high$checkin_tot), main="Total Check-in High", col="lightblue", lwd=3)
dev.off()
pdf("Q01_P01.pdf", width=7, height=7, title="Distribution of total checkins accross rate (stars)")
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", main = "", varwidth = TRUE, col = "red3")
dev.off()
pdf("Q01_P01.pdf", width=7, height=7)
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", main = "", varwidth = TRUE, col = "red3", main="Distribution of total checkins accross rate (stars)")
dev.off()
pdf("Q01_P01.pdf", width=7, height=7)
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", varwidth = TRUE, col = "red3", main="Distribution of total checkins accross rate (stars)")
dev.off()
setwd("~/Documents/CURSOS/Data Science Capstone/Data-Science-Capstone")
jpeg("Q01_P01.pdf", width=7, height=7, units=cm)
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", varwidth = TRUE, col = "red3", main="Distribution of total checkins accross rate (stars)")
dev.off()
jpeg("Q01_P02.pdf", width=5, height=5, units=cm)
plot(density(bus_low$checkin_tot), main="Total Check-in Low", col="lightblue", lwd=3)
dev.off()
jpeg("Q01_P03.pdf", width=5, height=5, units=cm)
plot(density(bus_high$checkin_tot), main="Total Check-in High", col="lightblue", lwd=3)
dev.off()
jpeg("Q01_P01.jpg", width=7, height=7, units="cm")
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", varwidth = TRUE, col = "red3", main="Distribution of total checkins accross rate (stars)")
dev.off()
jpeg("Q01_P01.jpg", width=640, height=640)
boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", varwidth = TRUE, col = "red3", main="Distribution of total checkins accross rate (stars)")
dev.off()
install.packages("jpeg")
library(jpeg)
Q01_P01 <- boxplot(bus_sub$checkin_tot ~ bus_sub$stars, xlab = "Stars", ylab = "Check-in", varwidth = TRUE, col = "red3", main="Distribution of total checkins accross rate (stars)")
Q01_P02 <- plot(density(bus_low$checkin_tot), main="Total Check-in Low", col="lightblue", lwd=3)
Q01_P03 <- plot(density(bus_high$checkin_tot), main="Total Check-in High", col="lightblue", lwd=3)
Q01_P04 <- hist(bus_low$stars, main="Stars Low", col="lightblue", lwd=3)
Q01_P05 <- hist(bus_high$stars, main="Stars High", col="lightblue", lwd=3)
fit_low <- train(stars ~ ., data=bus_low, method="rpart")
fit_high <- train(stars ~ ., data=bus_high, method="rpart")
# Print the resulting trees
library(rattle)
Q01_P06 <- fancyRpartPlot(fit_low$finalModel)
Q01_P07 <- fancyRpartPlot(fit_high$finalModel)
par(mfrow = c(1,2))
fancyRpartPlot(fit_low$finalModel)
fancyRpartPlot(fit_high$finalModel)
business <- read.csv("business.csv", stringsAsFactors = FALSE)
load("~/Documents/CURSOS/Data Science Capstone/yelp_dataset_challenge_academic_dataset/Capstone V03.RData")
browser()
load("Capstone V03.RData")
x <- read.csv("data/business.csv", stringsAsFactors = FALSE)
load("Capstone_Question02.RData")
library(knitr)
knit2html("Capstone_Rpt.html")
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
rest_cm$overall[1]
print(paste([rest_cm$overall[1],rest_cm2$overall[1]))
print(paste(rest_cm$overall[1],rest_cm2$overall[1]))
print(paste("Accuracy ==>",rest_cm$overall[1],rest_cm2$overall[1]))
print(paste("Accuracy prev ==>",rest_cm$overall[1]," Accuracy prev ==>",rest_cm2$overall[1]))
knit2html("Capstone_Report.Rmd")
load("Capstone_Question02.RData")
load("Capstone_Question02.RData")
print(paste("Accuracy prev ==>",rest_cm$overall[1],"  Accuracy new ==>",rest_cm2$overall[1]))
print(paste("Accuracy prev ==>",shop_cm$overall[1],"  Accuracy new ==>",shop_cm2$overall[1]))
knit2html("Capstone_Report.Rmd")
print(paste("Accuracy prev ==>",shop_cm$overall[1],"  Accuracy new ==>",shop_cm2$overall[1]))
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
varImp(rest_trn_rf)
varImp(rest_trn_rf)[1:10]
varImp(rest_trn_rf)[1:10,]
str(varImp(rest_trn_rf))
varImp(rest_trn_rf)$importance
varImp(rest_trn_rf)$importance[1:10,]
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
varImp(shop_trn_rf)$importance[1,]
varImp(shop_trn_rf)$importance[1,1]
names(varImp(shop_trn_rf)$importance[1:10,])
rownames(varImp(shop_trn_rf)$importance[1:10,])
knit2html("Capstone_Report.Rmd")
rank(varImp(shop_trn_rf)$importance[1:10,])
rank(rownames(varImp(shop_trn_rf)$importance[1:10,]))
str(varImp(shop_trn_rf))
rownames(varImp(shop_trn_rf)$importance)
rownames(order(varImp(shop_trn_rf)$importance, decreasing=T))
order(varImp(shop_trn_rf)$importance, decreasing=T)
rownames(varImp(shop_trn_rf))[order(varImp(shop_trn_rf)$importance, decreasing=T)]
rownames(varImp(shop_trn_rf))
rownames(varImp(shop_trn_rf)$importance)[order(varImp(shop_trn_rf)$importance, decreasing=T)]
rownames(varImp(shop_trn_rf)$importance)[1:10]
varImp(shop_trn_rf)
rownames(varImp(shop_trn_rf))
str(varImp(shop_trn_rf))
varImp(shop_trn_rf)
print(varImp(shop_trn_rf))
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
print(varImp(rest_trn_rf))[1]
str(print(varImp(rest_trn_rf)))
print(varImp(rest_trn_rf))[1:10]
varImp(rest_trn_rf)
varImp(rest_trn_rf)$importance
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
knit2html("Capstone_Report.Rmd")
summary(user_net)
knit2html("Capstone_Report.Rmd")
bet_rank <- rank(-unname(bet))
pr_rank <- rank(-unname(pr$vector))
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
library(cluster)
library(broom)
library(sqldf)
library(igraph)
library(dplyr)
library(ggplot2)
n <- 20 # number of top nodes
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
top_pr <- V(user_net)[match(pr$vector[pr_rank <= n], pr$vector)]
top_both <- intersect(top_bet, top_pr)
# Create a subset network including only top nodes
top_net <- induced_subgraph(user_net, top_both)
# Replace vertex labels with user names where available, otherwise use user_id
vnames <- paste(names(V(top_net)), collapse="','")
sql <- paste0("select uname, user_id from user where user_id in('", vnames, "')")
unames <- sqldf(sql)
unames <- rbind(unames, data.frame(uname=setdiff(names(V(top_net)), unames[,2]), user_id=setdiff(names(V(top_net)), unames[,2])))
V(top_net)$label <- unames[match(names(V(top_net)), unames[,2]),1]
save.image("~/Documents/CURSOS/Data Science Capstone/Data-Science-Capstone/Capstone_Question03.RData")
load("~/Documents/CURSOS/Data Science Capstone/Data-Science-Capstone/Capstone_Question03.RData")
bet_rank <- rank(-unname(bet))
pr_rank <- rank(-unname(pr$vector))
# Get top nodes and find the intersection of nodes that are in both: top betweeness and top page rank
n <- 20 # number of top nodes
top_bet <- V(user_net)[match(bet[bet_rank <= n], bet)]
top_pr <- V(user_net)[match(pr$vector[pr_rank <= n], pr$vector)]
top_both <- intersect(top_bet, top_pr)
# Create a subset network including only top nodes
top_net <- induced_subgraph(user_net, top_both)
# Replace vertex labels with user names where available, otherwise use user_id
vnames <- paste(names(V(top_net)), collapse="','")
sql <- paste0("select uname, user_id from user where user_id in('", vnames, "')")
unames <- sqldf(sql)
unames <- rbind(unames, data.frame(uname=setdiff(names(V(top_net)), unames[,2]), user_id=setdiff(names(V(top_net)), unames[,2])))
V(top_net)$label <- unames[match(names(V(top_net)), unames[,2]),1]
save.image("~/Documents/CURSOS/Data Science Capstone/Data-Science-Capstone/Capstone_Question03.RData")
knit2html("Capstone_Report.Rmd")
aggregate(user_sub,by=list(fit$cluster),FUN=mean)
user_sub_cl2 <- user_sub[user_sub$fit.cluster == 2,]
save.image("~/Documents/CURSOS/Data Science Capstone/Data-Science-Capstone/Capstone_Question03.RData")
knit2html("Capstone_Report.Rmd")
intersect(unames[,2],user_sub_cl2$user_id)
unames
user_sub_cl2
user_sub$user_id <- user$user_id
# subset cluster 2 which has the user_id with more reviews, fans, compliments, etc.
user_sub_cl2 <- user_sub[user_sub$fit.cluster == 2,]
user_sub_cl2$user_id
save.image("~/Documents/CURSOS/Data Science Capstone/Data-Science-Capstone/Capstone_Question03.RData")
knit2html("Capstone_Report.Rmd")
aggregate(user_sub,by=list(fit$cluster),FUN=mean)
aggregate(user_sub,by=list(fit$cluster),FUN=sd)
aggregate(user_sub,by=list(fit$cluster),FUN=mean)-aggregate(user_sub,by=list(fit$cluster),FUN=sd)
aggregate(user_sub,by=list(fit$cluster),FUN=mean)-aggregate(user_sub,by=list(fit$cluster),FUN=sd)[2,]
str(aggregate(user_sub,by=list(fit$cluster),FUN=mean)-aggregate(user_sub,by=list(fit$cluster),FUN=sd))
(aggregate(user_sub,by=list(fit$cluster),FUN=mean)-aggregate(user_sub,by=list(fit$cluster),FUN=sd))[2,]
top_both
V(top_net)[which(top_both)]
V(top_net)[top_both]
V(user_net)[top_both]
knit2html("Capstone_Report.Rmd")
V(top_net)[top_both]
V(user_net)[top_both]
(aggregate(user_sub,by=list(fit$cluster),FUN=mean)-aggregate(user_sub,by=list(fit$cluster),FUN=sd))[2,]
(aggregate(user_sub,by=list(fit$cluster),FUN=mean)-aggregate(user_sub,by=list(fit$cluster),FUN=sd))
knit2html("Capstone_Report.Rmd")
